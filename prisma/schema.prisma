generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String?
  email              String              @unique
  password           String
  role               Role                @default(CLIENT)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  businessId         String?
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  invoices           Invoice[]
  payments           Payment[]
  amendments         Amendment[]
  annualReportDeadlines AnnualReportDeadline[]
  annualReportFilings   AnnualReportFiling[]
  beneficialOwners    BeneficialOwner[]
  sessions           Session[]
  assignedTickets    Ticket[]            @relation("TicketAssignee")
  tickets            Ticket[]            @relation("TicketCreator")
  business           Business?           @relation(fields: [businessId], references: [id])
  verificationTokens VerificationToken[]
  phoneRequest       PhoneNumberRequest?
  posts              Post[]
  comments           Comment[]
  likes              Like[]
  affiliateLink      AffiliateLink?
  affiliatePayouts   AffiliatePayout[]
  settings           UserSettings?
  loginSessions      LoginSession[]
  personalDetails    PersonalDetails?
  accountManagerRequest AccountManagerRequest?
  createdBankAccounts BankAccount[] @relation("UserCreatedBankAccounts")
  createdPaymentMethods PaymentMethod[] 
  @@index([businessId], map: "User_businessId_fkey")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model VerificationToken {
  id         String   @id @default(uuid())
  token      String   @unique
  identifier String
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "VerificationToken_userId_fkey")
}

model Payment {
  id              String   @id @default(uuid())
  stripeSessionId String   @unique
  amount          Float
  status          String
  customerEmail   String
  metadata        String?  @db.LongText
  createdAt       DateTime @default(now())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "Payment_userId_fkey")
}

model Business {
  id            String         @id @default(uuid())
  name          String
  email         String?
  phone         String?
  address       String?
  website       String?
  industry      String?
  formationDate DateTime?
  ein           String?
  businessId    String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  documents     Document[]
  subscriptions Subscription[]
  users         User[]
}

model Subscription {
  id              String   @id @default(uuid())
  planId          String
  status          String
  startDate       DateTime @default(now())
  nextBillingDate DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  billingCycle    String
  businessId      String
  planName        String
  price           Float
  business        Business @relation(fields: [businessId], references: [id])

  @@index([businessId], map: "Subscription_businessId_fkey")
}

model Document {
  id         String   @id @default(uuid())
  name       String
  category   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  businessId String
  fileUrl    String
  type       String
  business   Business @relation(fields: [businessId], references: [id])

  @@index([businessId], map: "Document_businessId_fkey")
}

model Ticket {
  id          String    @id @default(uuid())
  subject     String
  description String    @db.Text
  status      String
  priority    String
  category    String
  creatorId   String
  assigneeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
  assignee    User?     @relation("TicketAssignee", fields: [assigneeId], references: [id])
  creator     User      @relation("TicketCreator", fields: [creatorId], references: [id])

  @@index([assigneeId], map: "Ticket_assigneeId_fkey")
  @@index([creatorId], map: "Ticket_creatorId_fkey")
}

model Message {
  id          String       @id @default(uuid())
  content     String       @db.Text
  sender      String
  senderName  String
  ticketId    String
  createdAt   DateTime     @default(now())
  attachments Attachment[]
  ticket      Ticket       @relation(fields: [ticketId], references: [id])

  @@index([ticketId], map: "Message_ticketId_fkey")
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  fileUrl   String
  size      String
  type      String
  messageId String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])

  @@index([messageId], map: "Attachment_messageId_fkey")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model Invoice {
  id              String    @id @default(uuid())
  invoiceNumber   String    @unique
  customerName    String
  customerEmail   String
  customerPhone   String?
  customerCompany String?
  customerAddress String?
  customerCity    String?
  customerState   String?
  customerZip     String?
  customerCountry String?
  amount          Float
  status          String
  items           String    @db.LongText
  paymentReceipt  String?
  paymentDate     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Invoice_userId_fkey")
}

model AccountManagerRequest {
  id          String   @id @default(cuid())
  userId      String   @unique
  status      String   @default("requested") // requested, pending, approved, rejected
  managerName String?
  contactLink String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PhoneNumberRequest {
  id          String   @id @default(uuid())
  userId      String   @unique
  phoneNumber String?
  status      String   @default("requested") // requested, pending, approved, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "PhoneNumberRequest_userId_fkey")
}
enum Role {
  ADMIN
  SUPPORT
  CLIENT
}
model SystemSettings {
  id    Int     @id @default(autoincrement())
  key   String  @unique
  value String  @db.Text
}
model Amendment {
  id                    String                   @id @default(uuid())
  userId                String
  type                  String
  details               String                   @db.Text
  status                String                   @default("pending")
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  documentUrl           String?
  receiptUrl            String?
  paymentAmount         Decimal?                 @db.Decimal(10, 2)
  notes                 String?                  @db.Text
  user                  User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  statusHistory         AmendmentStatusHistory[]

  @@index([userId], map: "Amendment_userId_fkey")
}
model AnnualReportDeadline {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String?
  dueDate     DateTime
  fee         Decimal  @db.Decimal(10, 2)
  lateFee     Decimal? @db.Decimal(10, 2)
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  filings     AnnualReportFiling[]
}
model BeneficialOwner {
  id                  String   @id @default(cuid())
  userId              String
  name                String
  title               String
  ownershipPercentage Decimal  @db.Decimal(5, 2)
  status              String   @default("pending")
  isDefault           Boolean  @default(false)
  dateAdded           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
model AnnualReportFiling {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  deadlineId  String
  deadline    AnnualReportDeadline @relation(fields: [deadlineId], references: [id], onDelete: Cascade)
  receiptUrl  String?
  reportUrl   String?
  status      String   @default("pending")
  userNotes   String?
  adminNotes  String?
  filedDate   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Post {
  id        String    @id @default(cuid())
  title     String
  content   String
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  status    String    @default("pending") // pending, approved, rejected
  comments  Comment[]
  likes     Like[]
  tags      PostTag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  likes     Like[]
  isBestAnswer Boolean  @default(false)  
  moderationNotes String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
}

model Tag {
  id      String    @id @default(cuid())
  name    String    @unique
  posts   PostTag[]
}

model PostTag {
  id     String @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String
}
model FilingRequirement {
  id          String   @id @default(cuid())
  title       String
  description String
  details     String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model AmendmentStatusHistory {
  id          String    @id @default(uuid())
  amendmentId String
  status      String
  createdAt   DateTime  @default(now())
  notes       String?   @db.Text
  updatedBy   String?
  amendment   Amendment @relation(fields: [amendmentId], references: [id], onDelete: Cascade)

  @@index([amendmentId], map: "AmendmentStatusHistory_amendmentId_fkey")
}
model PricingSettings {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model AffiliateLink {
  id        String      @id @default(cuid())
  userId    String      @unique
  code      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  clicks    AffiliateClick[]
  conversions AffiliateConversion[]

  @@map("affiliate_links")
}

model AffiliateClick {
  id        String      @id @default(cuid())
  linkId    String
  ipAddress String?
  userAgent String?     @db.Text
  referrer  String?
  createdAt DateTime    @default(now())
  link      AffiliateLink @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@map("affiliate_clicks")
}

model AffiliateConversion {
  id         String      @id @default(cuid())
  linkId     String
  orderId    String
  amount     Decimal     @db.Decimal(10, 2)
  commission Decimal     @db.Decimal(10, 2)
  status     AffiliateConversionStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  link       AffiliateLink @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@map("affiliate_conversions")
}

model AffiliatePayout {
  id        String      @id @default(cuid())
  userId    String
  amount    Decimal     @db.Decimal(10, 2)
  method    String
  status    AffiliatePayoutStatus @default(PENDING)
  notes     String?     @db.Text
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("affiliate_payouts")
}

model AffiliateSettings {
  id              Int       @id @default(autoincrement())
  commissionRate  Decimal   @default(10.00) @db.Decimal(5, 2)
  minPayoutAmount Decimal   @default(50.00) @db.Decimal(10, 2)
  cookieDuration  Int       @default(30)
  updatedAt       DateTime  @updatedAt

  @@map("affiliate_settings")
}

enum AffiliateConversionStatus {
  PENDING
  APPROVED
  REJECTED
  PAID
}

enum AffiliatePayoutStatus {
  PENDING
  COMPLETED
  REJECTED
}
model Coupon {
  id              String    @id @default(cuid())
  code            String    @unique
  description     String
  type            CouponType
  value           Decimal   @db.Decimal(10, 2)
  startDate       DateTime
  endDate         DateTime
  usageLimit      Int
  usageCount      Int       @default(0)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       String
  specificClient  Boolean   @default(false)
  clientIds       String?   @db.Text
  minimumAmount   Decimal?  @db.Decimal(10, 2)
  onePerCustomer  Boolean   @default(false)
  newCustomersOnly Boolean  @default(false)
  usages          CouponUsage[]
}

model CouponUsage {
  id        String   @id @default(cuid())
  couponId  String
  userId    String?
  orderId   String?
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SERVICE
}
model UserSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  theme                   String   @default("light") // light, dark, comfort
  accentColor             String   @default("#22c984")
  layoutDensity           String   @default("comfortable") // comfortable, compact
  loginNotificationsEnabled Boolean @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginSession {
  id          String   @id @default(cuid())
  userId      String
  ipAddress   String?
  userAgent   String
  browser     String?
  os          String?
  device      String?
  location    String?
  isActive    Boolean  @default(true)
  lastActiveAt DateTime @default(now())
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
model PersonalDetails {
  id                String    @id @default(cuid())
  userId            String    @unique
  clientName        String
  companyName       String
  currentAddress    String
  businessPurpose   String
  idCardFrontUrl    String
  idCardBackUrl     String
  passportUrl       String
  status            String    @default("pending") // pending, approved, rejected
  adminNotes        String?
  isRedirectDisabled Boolean  @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  members           PersonalDetailsMember[]
}
model PersonalDetailsMember {
  id                String          @id @default(cuid())
  personalDetails   PersonalDetails @relation(fields: [personalDetailsId], references: [id], onDelete: Cascade)
  personalDetailsId String
  memberName        String
  idCardFrontUrl    String
  idCardBackUrl     String
  passportUrl       String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([personalDetailsId])
}
model BankAccount {
  id           String   @id @default(cuid())
  accountName  String
  accountNumber String
  routingNumber String
  bankName     String
  accountType  String
  swiftCode    String?
  branchName   String?
  branchCode   String?
  isDefault    Boolean  @default(false)
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  creator      User     @relation("UserCreatedBankAccounts", fields: [createdBy], references: [id])

  @@index([isDefault])
  @@index([createdBy])
}
model PaymentMethod {
  id            String   @id @default(cuid())
  name          String
  description   String?
  isActive      Boolean  @default(true)
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creator       User     @relation(fields: [createdBy], references: [id])

  @@index([createdBy])
}



