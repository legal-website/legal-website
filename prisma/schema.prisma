generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String?
  email              String              @unique
  password           String
  role               Role                @default(CLIENT)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  businessId         String?
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  invoices           Invoice[]
  payments           Payment[]
  sessions           Session[]
  assignedTickets    Ticket[]            @relation("TicketAssignee")
  tickets            Ticket[]            @relation("TicketCreator")
  business           Business?           @relation(fields: [businessId], references: [id])
  verificationTokens VerificationToken[]
  phoneRequest       PhoneNumberRequest?
  templateAccess     TemplateAccess[]

  @@index([businessId], map: "User_businessId_fkey")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model VerificationToken {
  id         String   @id @default(uuid())
  token      String   @unique
  identifier String
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "VerificationToken_userId_fkey")
}

model Payment {
  id              String   @id @default(uuid())
  stripeSessionId String   @unique
  amount          Float
  status          String
  customerEmail   String
  metadata        String?  @db.LongText
  createdAt       DateTime @default(now())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "Payment_userId_fkey")
}

model Business {
  id            String         @id @default(uuid())
  name          String
  email         String?
  phone         String?
  address       String?
  website       String?
  industry      String?
  formationDate DateTime?
  ein           String?
  businessId    String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  documents     Document[]
  subscriptions Subscription[]
  users         User[]
}

model Subscription {
  id              String   @id @default(uuid())
  planId          String
  status          String
  startDate       DateTime @default(now())
  nextBillingDate DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  billingCycle    String
  businessId      String
  planName        String
  price           Float
  business        Business @relation(fields: [businessId], references: [id])

  @@index([businessId], map: "Subscription_businessId_fkey")
}

model Document {
  id         String   @id @default(uuid())
  name       String
  category   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  businessId String
  fileUrl    String
  type       String
  business   Business @relation(fields: [businessId], references: [id])

  @@index([businessId], map: "Document_businessId_fkey")
}

model Ticket {
  id          String    @id @default(uuid())
  subject     String
  description String    @db.Text
  status      String
  priority    String
  category    String
  creatorId   String
  assigneeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
  assignee    User?     @relation("TicketAssignee", fields: [assigneeId], references: [id])
  creator     User      @relation("TicketCreator", fields: [creatorId], references: [id])

  @@index([assigneeId], map: "Ticket_assigneeId_fkey")
  @@index([creatorId], map: "Ticket_creatorId_fkey")
}

model Message {
  id          String       @id @default(uuid())
  content     String       @db.Text
  sender      String
  senderName  String
  ticketId    String
  createdAt   DateTime     @default(now())
  attachments Attachment[]
  ticket      Ticket       @relation(fields: [ticketId], references: [id])

  @@index([ticketId], map: "Message_ticketId_fkey")
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  fileUrl   String
  size      String
  type      String
  messageId String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])

  @@index([messageId], map: "Attachment_messageId_fkey")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model Invoice {
  id              String    @id @default(uuid())
  invoiceNumber   String    @unique
  customerName    String
  customerEmail   String
  customerPhone   String?
  customerCompany String?
  customerAddress String?
  customerCity    String?
  customerState   String?
  customerZip     String?
  customerCountry String?
  amount          Float
  status          String
  items           String    @db.LongText
  paymentReceipt  String?
  paymentDate     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String?
  templateId      String?   // Reference to a template if this invoice is for a template purchase
  user            User?     @relation(fields: [userId], references: [id])
  template        Template? @relation(fields: [templateId], references: [id])

  @@index([userId], map: "Invoice_userId_fkey")
  @@index([templateId], map: "Invoice_templateId_fkey")
}

model PhoneNumberRequest {
  id          String   @id @default(uuid())
  userId      String   @unique
  phoneNumber String?
  status      String   @default("requested") // requested, pending, approved, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "PhoneNumberRequest_userId_fkey")
}

// New models for document templates
model Template {
  id          String            @id @default(uuid())
  name        String
  description String            @db.Text
  category    String
  price       Float
  fileUrl     String
  thumbnailUrl String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  access      TemplateAccess[]
  invoices    Invoice[]
}

model TemplateAccess {
  id         String   @id @default(uuid())
  userId     String
  templateId String
  grantedAt  DateTime @default(now())
  expiresAt  DateTime?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([userId, templateId])
  @@index([userId], map: "TemplateAccess_userId_fkey")
  @@index([templateId], map: "TemplateAccess_templateId_fkey")
}

enum Role {
  ADMIN
  SUPPORT
  CLIENT
}

