generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String?
  email              String              @unique
  password           String
  role               Role                @default(CLIENT)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  businessId         String?
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  invoices           Invoice[]
  payments           Payment[]
  sessions           Session[]
  assignedTickets    Ticket[]            @relation("TicketAssignee")
  tickets            Ticket[]            @relation("TicketCreator")
  business           Business?           @relation(fields: [businessId], references: [id])
  verificationTokens VerificationToken[]
  phoneRequest       PhoneNumberRequest?
  accountManagerRequest AccountManagerRequest?
  uploadedDocuments Document[]         @relation("DocumentUploader")
  sharedDocuments   DocumentSharing[]
  documentActivities DocumentActivity[]
  @@index([businessId], map: "User_businessId_fkey")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model VerificationToken {
  id         String   @id @default(uuid())
  token      String   @unique
  identifier String
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "VerificationToken_userId_fkey")
}

model Payment {
  id              String   @id @default(uuid())
  stripeSessionId String   @unique
  amount          Float
  status          String
  customerEmail   String
  metadata        String?  @db.LongText
  createdAt       DateTime @default(now())
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "Payment_userId_fkey")
}

model Business {
  id            String         @id @default(uuid())
  name          String
  email         String?
  phone         String?
  address       String?
  website       String?
  industry      String?
  formationDate DateTime?
  ein           String?
  businessId    String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  documents           Document[]
  documentActivities  DocumentActivity[]
  storage             BusinessStorage?
  subscriptions Subscription[]
  users         User[]
}

model Subscription {
  id              String   @id @default(uuid())
  planId          String
  status          String
  startDate       DateTime @default(now())
  nextBillingDate DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  billingCycle    String
  businessId      String
  planName        String
  price           Float
  business        Business @relation(fields: [businessId], references: [id])

  @@index([businessId], map: "Subscription_businessId_fkey")
}

model Document {
  id            String            @id @default(uuid())
  name          String
  description   String?           @db.Text
  category      String
  type          String            // File extension
  size          String            // File size in bytes
  fileUrl       String
  isPermanent   Boolean           @default(false)
  businessId    String
  uploadedById  String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  business      Business          @relation(fields: [businessId], references: [id], onDelete: Cascade)
  uploadedBy    User              @relation("DocumentUploader", fields: [uploadedById], references: [id])
  sharing       DocumentSharing[]
  activities    DocumentActivity[]
  @@index([businessId], map: "Document_businessId_fkey")
  @@index([uploadedById])
}
model DocumentSharing {
  id              String    @id @default(uuid())
  documentId      String
  sharedWithEmail String
  sharedById      String
  accessExpires   DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  document        Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  sharedBy        User      @relation(fields: [sharedById], references: [id])

  @@index([documentId])
  @@index([sharedById])
  @@index([sharedWithEmail])
}

model DocumentActivity {
  id          String    @id @default(uuid())
  action      String    // UPLOAD, DOWNLOAD, SHARE, DELETE
  documentId  String?
  userId      String?
  businessId  String
  details     String?   @db.Text
  createdAt   DateTime  @default(now())
  document    Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  business    Business  @relation(fields: [businessId], references: [id])

  @@index([documentId])
  @@index([userId])
  @@index([businessId])
}
model BusinessStorage {
  id                String    @id @default(uuid())
  businessId        String    @unique
  totalStorageBytes Int       @default(0)
  storageLimit      Int       @default(104857600) // 100MB in bytes
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  business          Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
}
model Ticket {
  id          String    @id @default(uuid())
  subject     String
  description String    @db.Text
  status      String
  priority    String
  category    String
  creatorId   String
  assigneeId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  messages    Message[]
  assignee    User?     @relation("TicketAssignee", fields: [assigneeId], references: [id])
  creator     User      @relation("TicketCreator", fields: [creatorId], references: [id])

  @@index([assigneeId], map: "Ticket_assigneeId_fkey")
  @@index([creatorId], map: "Ticket_creatorId_fkey")
}

model Message {
  id          String       @id @default(uuid())
  content     String       @db.Text
  sender      String
  senderName  String
  ticketId    String
  createdAt   DateTime     @default(now())
  attachments Attachment[]
  ticket      Ticket       @relation(fields: [ticketId], references: [id])

  @@index([ticketId], map: "Message_ticketId_fkey")
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  fileUrl   String
  size      String
  type      String
  messageId String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id])

  @@index([messageId], map: "Attachment_messageId_fkey")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model Invoice {
  id              String    @id @default(uuid())
  invoiceNumber   String    @unique
  customerName    String
  customerEmail   String
  customerPhone   String?
  customerCompany String?
  customerAddress String?
  customerCity    String?
  customerState   String?
  customerZip     String?
  customerCountry String?
  amount          Float
  status          String
  items           String    @db.LongText
  paymentReceipt  String?
  paymentDate     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Invoice_userId_fkey")
}

model AccountManagerRequest {
  id          String   @id @default(cuid())
  userId      String   @unique
  status      String   @default("requested") // requested, pending, approved, rejected
  managerName String?
  contactLink String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PhoneNumberRequest {
  id          String   @id @default(uuid())
  userId      String   @unique
  phoneNumber String?
  status      String   @default("requested") // requested, pending, approved, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "PhoneNumberRequest_userId_fkey")
}
enum Role {
  ADMIN
  SUPPORT
  CLIENT
}

